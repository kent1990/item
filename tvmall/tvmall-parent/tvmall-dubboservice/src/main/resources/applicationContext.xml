<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        " >
    <!-- 配置文件扫描 -->
    <context:component-scan base-package="com.zhengke"/>
    
    <!-- 数据库文件的引入 -->
    <context:property-placeholder location="classpath:db.properties"/>
    
<!--  <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:dbconfig.properties</value>
			</list>
		</property>
	</bean> -->
    
	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close"> 
	  <property name="driverClassName" value="${jdbc.driverClassName}" /> 
	  <property name="url" value="${jdbc.url}" /> 
	  <property name="username" value="${jdbc.username}" /> 
	  <property name="password" value="${jdbc.password}" /> 
	  <!-- 配置初始化大小、最小、最大 --> 
	  <property name="initialSize" value="${jdbc.initialSize}" /> 
	  <property name="minIdle" value="${jdbc.minIdle}" /> 
	  <property name="maxActive" value="${jdbc.maxActive}" />	 
	  <!-- 配置获取连接等待超时的时间 --> 
	  <property name="maxWait" value="${jdbc.maxWait}" />	 
	  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
	  <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
	  <property name="minEvictableIdleTimeMillis" value="300000" />
	 
	  <property name="testWhileIdle" value="true" />
	 
	  <!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
	  <property name="testOnBorrow" value="true" /> 
	  <property name="testOnReturn" value="false" />
	</bean>    
    
    
    <!-- mapper映射文件配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    	<property name="basePackage" value="com.zhengke.dao"></property>
    </bean> 
    
    <!-- 加载mybatis的配置文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 配置文件 -->
    	<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property>
    	<!-- 数据源 -->
    	<property name="dataSource" ref="dataSource"></property>
    	<property name="mapperLocations">
            <array>
                <value>classpath:mybatis/*/*.xml</value>
            </array>
        </property>		
		<property name="typeAliasesPackage" value="com.zhengke.pojo" />
    </bean>
    
    <!-- 使用sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />        
	</bean>    
    
    <!-- 事务管理器 -->
    <bean id="transactionManager" 
    	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 通知 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<!-- 
    			REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
				 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 
				 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 
				 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 
				 NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
				 NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 
				 NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务
    		 -->
    		<tx:method name="add*" propagation="REQUIRED"/>
    		<tx:method name="insert*" propagation="REQUIRED"/>
    		<tx:method name="del*" propagation="REQUIRED"/>
    		<tx:method name="update*" propagation="REQUIRED"/>
    		<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
    		<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
    		<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
    	</tx:attributes>
    </tx:advice>
    
    <!-- 配置service层需要的 -->
    <!-- 配置aop切面 -->
    <aop:config>
    	<aop:advisor advice-ref="advice" pointcut="execution(* com.zhengke.service..*(..))"/>
    </aop:config>
</beans>